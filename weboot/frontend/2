import {useState, useEffect, useContext} from 'react';
import  {TrackMetaDataContext} from './Contexts/TrackMetaDataContext.jsx';


async function fetchAccessToken(email){
        const params = new URLSearchParams();
        params.append('email', email);
        const resp = await fetch(`http://127.0.0.1:3000/api/fresh_token?${params.toString()}`, {
            method: "GET"
        });
        const token = await resp.json();
        return token.access_token;
}



// SpotifyPlayer needs to depend upon reactive value of context_uri which will be fed from SpotifyTrack ws
// endpoint and do a PUT request to the spotify api every time the context_uri is changed
export default function SpotifyPLayer(){
    const [playerRef, setPlayerRef] = useState(null);
    const [deviceIds, setDeviceIds] = useState([]);
    const [activeDeviceId, setActiveDeviceId] = useState(null);
    const [outOfSync, setOutOfSync] = useState(false);
    // currTrackUri is the most updated value of the playerUri
    const currTrackMetaData = useContext(TrackMetaDataContext);
    const [metaData, setMetaData] = useState(currTrackMetaData);
    //const [playerUri, setPlayerUri] = useState(currTrackMetaData.track_uri);
    // const [playerUri, setPlayerUri] = useState('');


    async function syncTrack(track_uri, position_ms, is_playing, disc_number){
        const params = new URLSearchParams();
        params.append('track_uri', track_uri);
        params.append('position', position_ms);
        params.append('email', userEmail); // this is a global defined in thymeleaf "hello-world" templates...
        params.append('is_playing', is_playing);
        params.append('disc_number', disc_number);
        const resp = await fetch(`http://127.0.0.1:3000/api/play_track?${params.toString()}`);
        // only after the above fetch has been done
        if (!resp.ok){
            throw new Error("first fetch to play a new track failed!");
        }

        // TODO: check if these setStates are batched or not?
        setOutOfSync(false);

        setMetaData(prev => currTrackMetaData);
    }

    async function nextTrack(){
        const params = new URLSearchParams();
        params.append('email', userEmail);
        // TODO: something to return from this request
        const resp = await fetch(`http://127.0.0.1:3000/api/next_track?${params.toString()}`);
        if(!resp.ok){
            throw new Error("fetch to play the next track didn't work");
        }
        setOutOfSync(true);
    }


    if(!outOfSync && !(currTrackMetaData.track_uri === metaData.track_uri && currTrackMetaData.progress_ms === metaData.progress_ms && currTrackMetaData.is_playing === metaData.is_playing)){
        setOutOfSync(true);
    }

    useEffect(() => {
            window.onSpotifyWebPlaybackSDKReady = () => {
                if (!userGrantedPermission) {
                      console.warn("User did not grant permission. Skipping player init.");
                      return;
                }
              //const token = 'BQC-uSfZKu7nIgOmAw_KIjcc05DorR0Z_pGuld9cDJCQNRmqwLoizjYhWOkjJ0rC73YqIbrqFntrkNcSSFIeA9fkGI60gAK6CgJDdgHdZd-O06kRNDQMqyvUsfD91MAS30R0x_VR0pZoTpiASWuX3IE5wMVNHsyNihxhBm8OTWGjE_GB_ZJ9_VTkoi4dCbE1CavgbzvZpgkg6VXvgmcIn3PjBDXcSMq5Oakbt99ZS5BJ80d4OyNqwJrEikgw6eYCp4He1Lpl1cS8N9xxOvEmFh4XiiyMEKYVz43-vf38wzQ_Dnb5694hMhru81Ja_maF';
              const token = accessToken;

              const oAuthRefersh = async (cb) => {
                      const freshToken = await fetchAccessToken(userEmail);
                      cb(freshToken);
              };

            const player = new Spotify.Player({
                name: 'Web Playback Spotify Player',
                getOAuthToken: oAuthRefersh,
                volume: 0.8
            });

              // Ready
              const readyCb = async ({device_id}) => {
                    console.log('Ready with Device ID', device_id); //  this is what you use
                    // transferring playback
                    const resp = await fetch('http://127.0.0.1:3000/api/transfer_playback', {
                    method: 'POST',
                    body: JSON.stringify({ device_ids: [device_id], play: true }),
                    headers: {
                      'Content-Type': 'application/json',
                      'X-Token': `${token}`
                      },
                    });
                    const resp_ = await resp.json();
                    console.log(`Transferred playback! response: ${resp_}`);


                };

                player.addListener('ready', readyCb);

                player.addListener('player_state_changed', (state) => {
                    if(state){
                        // to set-up the meta data of this component
                        player.getCurrentState().then(state_ => {
                          // To set the new metaData but unfortunately, Spotify API sucks
                            // and we'd have to make an extra network call just to get the
                            // index of the song into the album.
                            const resp = await fetch(`http://127.0.0.1:3000/api/${}`);
                           const newMetaData = {
                               track_uri: state_.context.uri,
                               progress_ms: state_.position,
                               name: state_.track_window.current_track.name,
                               is_playing: !state_.paused,
                               artists: state_.track_window.current_track.artists.map(artist => {
                                   return artist.name;
                               });
                           };

                        });
                    }

                });

                // Not Ready
                player.addListener('not_ready', ({ device_id }) => {
                    console.log('Device ID has gone offline', device_id);
                });

                player.addListener('initialization_error', ({ message }) => {
                    console.error(message);
                });

                player.addListener('authentication_error', ({ message }) => {
                    console.error(message);
                });

                player.addListener('account_error', ({ message }) => {
                    console.error(message);
                });


                player.connect().then(success => {
                    if (!success){
                        console.error("player didn't reallt connect...");
                        return;
                    }

                    setPlayerRef(player);
                });
            }

            // load the external spotify script after defining the SDK callback as done above
            const script = document.createElement('script');
            script.src = 'https://sdk.scdn.co/spotify-player.js';
            script.async = true;
            script.onload = () => {
              console.log('Script loaded successfully!');
            };
            script.onerror = (error) => {
              console.error('Error loading script:', error);
            };
            document.body.appendChild(script); // this starts downloading the script


    }, []);

    const prettyJson = JSON.stringify(metaData,undefined, 2);

    return (<>
        <p> Playing on your device:</p> <pre>{prettyJson}</pre>
        {outOfSync &&
            <button onClick={() => syncTrack(currTrackMetaData.track_uri, currTrackMetaData.progress_ms, currTrackMetaData.is_playing, currTrackMetaData.disc_number)}>
            Sync In!
        </button>
        }
        <button onClick={() => nextTrack()}>Next track</button>

    </>
    )
}
